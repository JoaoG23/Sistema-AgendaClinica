// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model usuarios {
  id                    String                  @id @default(uuid())
  login                 String                  @unique @db.VarChar(255)
  senha                 String                  @unique @db.Text
  telefone              String                  @unique @db.VarChar(25)
  email                 String?                 @unique @db.VarChar(25)
  isAtivado             Boolean                 @default(false) @db.Boolean
  perfil_usuarios       perfil_usuarios?        @relation(fields: [perfil_usuariosId], references: [id])
  perfil_usuariosId     String?
  createdAt             DateTime?               @default(now())
  updatedAt             DateTime?               @updatedAt
  colaboradores         colaboradores[]
  clientes              clientes[]
  gestao_token_usuarios gestao_token_usuarios[]
}

model gestao_token_usuarios {
  id             Int       @id @default(autoincrement())
  token          String    @db.VarChar(10)
  validade_token DateTime? @default(now())
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @updatedAt
  usuarios       usuarios? @relation(fields: [usuariosId], references: [id])
  usuariosId     String?
}

model perfil_usuarios {
  id          String @id @default(uuid())
  nome_perfil String @db.VarChar(60)

  visualizar_clientes      Boolean @default(false) @db.Boolean
  visualizar_colaboradores Boolean @default(false) @db.Boolean

  usuarios usuarios[]
}

model clientes {
  id            String         @id @default(uuid())
  nome_completo String         @db.VarChar(250)
  isAtivado     Boolean?       @default(true) @db.Boolean
  createdAt     DateTime?      @default(now())
  updatedAt     DateTime?      @updatedAt
  agendamentos  agendamentos[]
  usuarios      usuarios?      @relation(fields: [usuariosId], references: [id])
  usuariosId    String?
}

model colaboradores {
  id                          String                     @id @default(uuid())
  nome_completo               String                     @db.VarChar(250)
  isAtivado                   Boolean                    @default(true) @db.Boolean
  createdAt                   DateTime?                  @default(now())
  updatedAt                   DateTime?                  @updatedAt
  especialidade_colaborador   especialidade_colaborador? @relation(fields: [especialidade_colaboradorId], references: [id])
  especialidade_colaboradorId String?
  agendamentos                agendamentos[]
  usuarios                    usuarios?                  @relation(fields: [usuariosId], references: [id])
  usuariosId                  String?
}

model especialidade_colaborador {
  id          String          @id @default(uuid())
  nome        String          @db.VarChar(70)
  createdAt   DateTime?       @default(now())
  updatedAt   DateTime?       @updatedAt
  colaborador colaboradores[]
}

model agendamentos {
  id                 String         @id @default(uuid())
  dataHoraInicio     DateTime       @default(now()) @db.Timestamp
  dataHoraFim        DateTime       @default(now()) @db.Timestamp
  valor              Decimal?       @db.Money
  isServicoConcluido Boolean?       @default(true) @db.Boolean
  observacao         String?        @db.VarChar(255)
  createdAt          DateTime?      @default(now())
  updatedAt          DateTime?      @updatedAt
  clientes           clientes?      @relation(fields: [clientesId], references: [id])
  clientesId         String?
  colaboradores      colaboradores? @relation(fields: [colaboradoresId], references: [id])
  colaboradoresId    String?

  servicos_estabelecimento_agendamentos servicos_estabelecimento_agendamentos[]
}

model servicos_estabelecimento_agendamentos {
  id                         String                    @id @default(uuid())
  agendamentos               agendamentos?             @relation(fields: [agendamentosId], references: [id])
  agendamentosId             String?
  servicos_estabelecimento   servicos_estabelecimento? @relation(fields: [servicos_estabelecimentoId], references: [id])
  servicos_estabelecimentoId String?
}

model servicos_estabelecimento {
  id                                    String                                  @id @default(uuid())
  nome                                  String                                  @db.VarChar(60)
  descricao                             String?                                 @db.VarChar(170)
  createdAt                             DateTime?                               @default(now())
  updatedAt                             DateTime?                               @updatedAt
  servicos_estabelecimento_agendamentos servicos_estabelecimento_agendamentos[]
}

model periodo_agendamentos {
  id             String   @id @default(uuid())
  dia_da_semana  String   @db.VarChar(250)
  dataHoraInicio DateTime @default(now()) @db.Timestamp
  dataHoraFim    DateTime @default(now()) @db.Timestamp
  isAtivado      Boolean  @default(true) @db.Boolean
  observacao     String?  @db.VarChar(255)
}
